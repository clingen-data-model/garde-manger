(ns garde-manger.gene-dosage
  (:require [clojure.data.xml :as xml]
            [clojure.xml :as cxml]
            [clojure.java.io :as io]
            [clj-http.client :as http]
            [cheshire.core :as json]
            [clojure.set :refer [rename-keys]]
            [clojure.zip :as zip]
            [clojure.data.zip :as dzip]
            [clojure.data.zip.xml :as xdzip :refer [xml-> xml1-> attr attr= text]]))


;; This works: Should switch to using REST API, instead of trying to hack
;; a response from the (broken!) RSS feed
;; curl -D- -u thnelson@geisinger.edu:***REMOVED*** -X GET -H "Content-Type: application/json" https://ncbijira.ncbi.nlm.nih.gov/rest/api/2/issue/createmeta

;; JIRA maintains custom fields for the PMID links and descriptions that are used
;; as evidence to justify the interpretation
;; These are listed as pairs, the first is a PMID reference, the second is
;; a textual description
(def loss-evidence-fields
  [["customfield_10183" "customfield_10184"]
   ["customfield_10185" "customfield_10186"]
   ["customfield_10187" "customfield_10188"]])

(def gain-evidence-fields
  [["customfield_10189" "customfield_10190"]
   ["customfield_10191" "customfield_10192"]
   ["customfield_10193" "customfield_10194"]])

;; deprecate in favor of combined hashes
(def loss-score "customfield_10165")
(def gain-score "customfield_10166")

(def loss-fields {"customfield_10200" :loss_phenotype
                  "customfield_10165" :haploinsufficiency_score})

(def gain-fields {"customfield_10166" :triplosensitivity_score
                  "customfield_10201" :gain_phenotype})

(def gene-fields {"customfield_10157" :ncbi_gene})

(def frontmatter-fields {"title" :title
                         "updated" :date
                         "status" :status})

;; Fields where we want to extract a more deeply nested value to represent
;; in the JSON, or otherwise apply some appropriate transformation
;; a map of functions to apply to the value of certain keys after retrieval

(defn extract-evidence-line
  [fields key-set]
  (for [e key-set
        :let [pub (fields (first e))
              desc (fields (second e))]
        :when pub]
    {:publication pub, :description desc}))

(defn transform-gene-haploinsufficiency
  "Transform an assertion generated by JIRA into a standard format"
  [item]
  (let [id (item "key")
        fields (item "fields")
        evidence (extract-evidence-line fields loss-evidence-fields)
        key-set (merge frontmatter-fields gene-fields loss-fields)]
    (merge {:id id}
           {:evidence_line  evidence}
           (-> fields (rename-keys key-set) (select-keys (vals key-set))))))

(defn transform-jira-issues
  "Transform issues from JIRA into data model-ish format"
  []
  (let [query-str "project = ISCA AND type = \"ISCA Gene Curation\" AND \"ISCA Haploinsufficiency score\" in (3) ORDER BY updated DESC"
        url "https://ncbijira.ncbi.nlm.nih.gov/rest/api/2/search"
        result (http/get url {:query-params 
                              {:jql query-str}
                              :content-type "application/json"
                              :basic-auth ["thnelson@geisinger.edu", "***REMOVED***"]})
        issues (-> result :body json/parse-string (get "issues"))]
    (-> issues first transform-gene-haploinsufficiency)))


